// Generated by CoffeeScript 1.6.2
(function() {
  Ember.Factory = Ember.Object.extend({
    init: function() {
      var props, type;

      type = this.get('type').classify();
      if (!type) {
        throw "You must specify the type to create:- create(type: 'person)";
      }
      this.set('type', type.classify());
      this.set('store', Ember.factories.store());
      props = this.get('properties');
      if (props) {
        this.properties(props);
      }
      return this;
    },
    properties: function(hash) {
      this.hash = hash;
      Ember.factories.register(this);
      return this;
    },
    setup: function(index) {
      var clazz, key, props, type, value, _i, _len, _ref;

      type = this.get('type');
      clazz = this._modelClass(type);
      if (!clazz) {
        throw "Model class for " + type + ' can not be resolved :(';
      }
      props = {};
      _ref = this.hash;
      for (value = _i = 0, _len = _ref.length; _i < _len; value = ++_i) {
        key = _ref[value];
        props[key] = this._resolveValue(value, index);
      }
      props.factory_built = true;
      props.f = this;
      if (!store) {
        throw "You must use Ember.factories.use_store(store) to set the store to be used by factories";
      }
      type = this.get('type');
      return this.get('store').load(clazz, props);
    },
    build: function(count) {
      var results, self, _i, _results;

      if (count == null) {
        count = 1;
      }
      self = this;
      results = (function() {
        _results = [];
        for (var _i = 1; 1 <= count ? _i <= count : _i >= count; 1 <= count ? _i++ : _i--){ _results.push(_i); }
        return _results;
      }).apply(this).map(function(index) {
        return self.setup(index);
      });
      if (count === 1) {
        return results[0];
      } else {
        return results;
      }
    },
    f: Ember.Factory,
    _modelClass: function(type) {
      return window.App[type];
    },
    _resolveValue: function(value, index) {
      var type;

      type = Ember.typeOf(value);
      switch (type) {
        case 'function':
          return value.apply(this, index);
        default:
          return value;
      }
    }
  });

  Ember.Factory.reopenClass({
    counter: function(type) {
      var counter, _base;

      this.counter_hash || (this.counter_hash = {});
      counter = (_base = this.counter_hash)[type] || (_base[type] = 0);
      return counter += 1;
    },
    build: function(type, count) {
      if (count == null) {
        count = 1;
      }
      return Ember.factories.find(type).build(count);
    }
  });

  Ember.Factories = Ember.Map;

  Ember.factories = Ember.Factories.create();

  Ember.factories.use_store = function(store) {
    return this.set('store', store);
  };

  Ember.factories.store = function() {
    return this.get('store');
  };

  Ember.factories.register = function(factory) {
    return this.set(factory.get('type'), factory);
  };

  Ember.factories.find = function(type) {
    return this.get(type.classify());
  };

}).call(this);
